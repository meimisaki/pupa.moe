'use strict';

function getAutocomplete(pre) {
	pre = pre.trim();
	var args = Array.prototype.slice.call(arguments, 1);
	var callback = args.pop();
	var opts = args.pop() || {};
	var limit = opts.limit === undefined ? 10 : opts.limit;
	if (!limit) return callback(null, []);
	var client = this._;
	function iter(out, start, step) {
		var end = start + step;
		client.zrange('autocomplete', start, end, function (err, replies) {
			if (err) return callback(err);
			for (var key = 0 ; key < replies.length ; ++key) {
				var tag = replies[key];
				if (tag.slice(0, pre.length) != pre) return callback(null, out);
				if (tag.slice(-1) == '\n') {
					if (out.push(tag.slice(0, -1)) == limit) return callback(null, out);
				}
			}
			if (replies.length == step + 1) iter(out, end + 1, step + 1);
			else callback(null, out);
		});
	}
	client.zrank('autocomplete', pre, function (err, rank) {
		if (err) return callback(err);
		if (rank === null) return callback(null, []);
		iter([], rank, 10);
	});
}

module.exports = getAutocomplete;
